openapi: 3.0.1
info:
  title: Pickle
  description: >-
    Pickle server API
  contact:
    email: lauviah0622@gmail.com
  version: 1.0.0
servers:
  - url: https://pickle.io/v2
  - url: http://localhost:4000
tags:
  - name: pet
    description: Everything about your Pets
  - name: store
    description: Access to Petstore orders
  - name: user
    description: Operations about user
paths:
  /events:
    get:
      tags:
        - event
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                sponsor:
                  type: object
      responses: 
        '200': 
          description: get all events
          content: 
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Event'
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Event:
      allOf:
        - $ref: '#/components/schemas/table_basic_columns'
        - type: object
          properties:
            id:
              type: integer
              format: int64
            title:
              type: string
            period:
              type: integer
            urlKey:
              type: string
            expectedTimeStart:
              $ref: '#/components/schemas/Time'
            expectedTimeEnd:
              $ref: '#/components/schemas/Time'
            eventStart:
              $ref: '#/components/schemas/Time'
            eventEnd:
              $ref: '#/components/schemas/Time'
            sponsor:
              $ref: '#/components/schemas/Sponsor'
    Sponsor:
      allOf:
        - $ref: '#/components/schemas/table_basic_columns'
        - type: object
          properties: 
            name: 
              type: string
    
    Time:
      type: string
      format: date-time
    table_basic_columns:
      type: object
      properties:
        id:
          type: integer
          format: int64
        createdAt:
          $ref: '#/components/schemas/Time'
        updatedAt:
          $ref: '#/components/schemas/Time'

    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://petstore.swagger.io/oauth/dialog
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
